Using strings:
    nothing interesting

Using ghidra:
    It seems that password is hardcoded and stored on the stack as a local variable, so therefore it can't be detected by the "strings" tool.

    Unfortunatelly ghidra shows local strings (char passwd[] = "abcdefgh") assignment as an assignment of numbers to the array of integers.
    E.g. 
    int local_X = 0x64636261; // Which is actually string "dcba"
    int local_Y = 0x68676665; // Which is actually string "hgfe"


    Luckly we can use an awesome script "SearchSimpleStackStrings.py" from https://github.com/0x6d696368/ghidra_scripts.git
    This script can show as all stack strings.
    One of these strings is later used in the 
    
    Final string composed of these strings is:
    ag7`124504a`;1;:;1`3:3a1gf72a;7g

    Later first 0x20 characters from this strin are used in a function and xored with number 3

     _s2 = (char *)FUN_00101179((long)local_1a8,0x20,3);


    Checked in Python
    >>> "".join([chr(ord(d)^3) for i,d in enumerate("ag7`124504a`;1;:;1`3:3a1gf72a;7g") if i < 32])
    Result: 'bd4c217637bc828982c090b2de41b84d'

    └──╼ $./crackme
    Enter key: bd4c217637bc828982c090b2de41b84d
    good job!



Using ltrace:
    Use ltrace to detect a call to the library
    ltrace ./crackme
    strcmp("ahoj", "bd4c217637bc828982c090b2de41b84d"...)   

    So the password is "bd4c217637bc828982c090b2de41b84d" .
